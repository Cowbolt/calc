{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","onClick","button","calculate","setState","value","state","slice","error","handleChange","bind","handleSubmit","event","this","target","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","expression","then","res","json","result","className","buttonRow","buttons","i","arguments","length","push","name","onSubmit","type","style","onChange","calculatorButtons","React","Component","CalculatorButton","node","waves","large","width","display","e","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAGMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,QAAU,SAAAC,GACO,MAAXA,EACF,EAAKC,YAEa,WAAXD,EACP,EAAKE,SAAS,CACZC,MAAO,EAAKC,MAAMD,MAAME,MAAM,GAAI,KAGlB,OAAXL,EACP,EAAKE,SAAS,CACZC,MAAO,KAIT,EAAKD,SAAS,CACZC,MAAO,EAAKC,MAAMD,MAAQH,KArC9B,EAAKI,MAAQ,CACXE,MAAO,KACPH,MAAO,IAET,EAAKI,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,0EAWNE,GACXC,KAAKT,SAAS,CAACC,MAAOO,EAAME,OAAOT,U,mCAIxBO,GACXC,KAAKV,YACLS,EAAMG,mB,kCA2BK,IAAD,OACVC,MAAM,UAAW,CACfC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACC,WAAYV,KAAKP,MAAMD,UAE5CmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKvB,SAAS,CACZC,MAAOsB,EAAOtB,WAGlB,SAACG,GACC,EAAKJ,SAAS,CACZC,MAAOG,S,0CAOf,OACE,yBAAKoB,UAAU,qBACf,kBAAC,QAAD,KACE,+BACGf,KAAKgB,UAAU,EAAE,EAAE,EAAE,IAAI,MACzBhB,KAAKgB,UAAU,EAAE,EAAE,EAAE,IAAI,UACzBhB,KAAKgB,UAAU,EAAE,EAAE,EAAE,IAAI,KACzBhB,KAAKgB,UAAU,EAAE,IAAI,IAAI,IAAI,U,kCASpC,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IACpCD,EAAQI,KAAK,kBAAC,EAAD,CAAkBC,KAAMH,UAAUD,GAAI9B,QAASY,KAAKZ,WAEnE,OACE,4BACC6B,K,+BAMH,OACE,yBAAKF,UAAU,cACb,0BAAMQ,SAAUvB,KAAKF,cACnB,kBAAC,YAAD,CACG0B,KAAK,OACLC,MAAO,CAAC,YAAa,QACrBjC,MAAOQ,KAAKP,MAAMD,MAClBkC,SAAU1B,KAAKJ,gBAGnBI,KAAK2B,yB,GA5GWC,IAAMC,WAmHzBC,E,YACJ,WAAY3C,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CAACD,MAAO,IAFJ,E,sEAIT,IAAD,OACP,OACE,4BACE,kBAAC,SAAD,CACAuC,KAAK,IACLC,MAAM,QACNC,OAAK,EACLR,MAAO,CACPS,MAAO,MACPC,QAAS,aACT,YAAa,QACbb,KAAQtB,KAAKb,MAAMmC,KACnBlC,QAAS,SAACgD,GAAD,OAAO,EAAKjD,MAAMC,QAAQgD,EAAEnC,OAAOqB,QAC3CtB,KAAKb,MAAMmC,W,GAlBWM,IAAMC,WAyBtB3C,I,MCnIAmD,MARf,WACE,OACE,yBAAKtB,UAAU,aACf,kBAAC,EAAD,QCKgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.ba9aad4e.chunk.js","sourcesContent":["import React from 'react';\nimport {Table, TextInput, Button} from 'react-materialize';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      value: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Event handler for input change\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  // Event handler for input submit (pressing enter)\n  handleSubmit(event) {\n    this.calculate();\n    event.preventDefault();\n  }\n\n  // Event handler for button presses\n  // If equals sign is pressed, calculate sum. Otherwise, update input value\n  onClick = button => {\n    if (button === \"=\") {\n      this.calculate()\n    }\n    else if (button === \"←\") {\n      this.setState({\n        value: this.state.value.slice(0, -1)\n      })\n    }\n    else if (button === \"CE\") {\n      this.setState({\n        value: \"\"\n      })\n    }\n    else {\n      this.setState({\n        value: this.state.value + button\n      })\n    }\n  }\n\n  // Submit POST query to backend endpoint, fetch resultant value\n  calculate() {\n    fetch(\"0.0.0.0\", {\n      method: \"POST\",\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({expression: this.state.value})\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            value: result.value\n          });\n        },\n        (error) => {\n          this.setState({\n            value: error\n          });\n        }\n      )\n  }\n\n  calculatorButtons() {\n    return(\n      <div className=\"calculatorButtons\">\n      <Table>\n        <tbody>\n          {this.buttonRow(1,2,3,'/','CE')}\n          {this.buttonRow(4,5,6,'*','←')}\n          {this.buttonRow(7,8,9,'-','(')}\n          {this.buttonRow(0,'.','=','+',')')}\n        </tbody>\n      </Table>\n      </div>\n    );\n  }\n\n  buttonRow() {\n    const buttons = []\n    for (var i = 0; i < arguments.length; i++) {\n      buttons.push(<CalculatorButton name={arguments[i]} onClick={this.onClick}/>)\n    }\n    return(\n      <tr>\n      {buttons}\n      </tr>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <form onSubmit={this.handleSubmit}>\n          <TextInput\n             type=\"text\"\n             style={{'font-size': '30px'}}\n             value={this.state.value}\n             onChange={this.handleChange}\n          />\n        </form>\n        {this.calculatorButtons()}\n      </div>\n    );\n  }\n\n}\n\nclass CalculatorButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n  }\n  render() {\n    return(\n      <td>\n        <Button\n        node=\"a\"\n        waves=\"light\"\n        large\n        style={{\n        width: '20%',\n        display: 'table-cell',\n        'font-size': '30px'}}\n        name = {this.props.name}\n        onClick={(e) => this.props.onClick(e.target.name)}>\n        {this.props.name}\n      </Button>\n      </td>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './components/Calculator.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n    <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}